swirl()
mutate(cran, size_mb = size/2^20)
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(cran, size_mb = size/2^20)
cran %>%
select(ip_id, country, package, size) %>%
mutate(cran, size_mb = size/2^20) %>% print
help()
?swirl
skip()
mutate(size_mb = size / 2^20) %>% filter(size_mb <= .05)
mutate(size_mb = size / 2^20) %>% filter(size_mb <= .5)
skip()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5) %>%
# Your call to arrange() goes here
arrange(desc(size_mb))
submit()
skip()
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
by_package <- group_by(cran, package)
by_package
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
pack_sum <- summarize(by_package,count = n(), unique = n_distinct(ip_id),
countries = n_distinct(country),avg_bytes = mean(size))
quantile(pack_sum$count,probs=0.99)
submit()
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
filter(pack_sum, count>679)
top_counts <- filter(pack_sum, count>679)
View(top_counts)
type_counts
top_counts
View(top_counts)
top_counts_sorted <-arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs= 0.99 )
top_unique <- filter(pack_sum, unique >465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
cran %>% select(ip_id:size)
submit()
select(ip_id, country, package, size)
cran %>%
select(ip_id, country, package, size)
submit()
print
cran %>%
select(ip_id, country, package, size)
print
submit()
quit
library(swirl)
swirl()
cran %>% select(ip_id:size)
submit()
cran %>% select(ip_id:size) %>% print()
submit()
cran %>% select(ip_id, country,package,size) %>% print()
submit()
mutate(size_mb = size / 2^20) %>% filter(size_mb <= 05)
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>% filter(size_mb <= 05)
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>% filter(size_mb <= 05) %>% print()
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20)  %>% print()
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 05)
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 05) %>% print()
# Your call to filter() goes here
submit()
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5)
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5) %>% print
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5) %>%
arrange(desc(size_mb)) %>% print
# Your call to arrange() goes here
submit()
install.packages(c("caret", "chron", "crayon", "curl", "foreign", "httr", "lme4", "R6", "RcppEigen", "RCurl", "stringi", "survival", "TTR", "vcd", "XML"))
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
countries = n_distinct(country),avg_bytes = mean(size))
pack_sum <- summarize(by_package,count = n(), unique = n_distinct(ip_id),
countries = n_distinct(country),avg_bytes = mean(size))
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
filter(pack_sum, count>679)
top_counts <- filter(pack_sum, count>679)
View(top_counts)
top_counts
View(top_counts)
top_counts_sorted <-arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs= 0.99 )
top_unique <- filter(pack_sum, unique >465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
cran %>% select(ip_id, country,package,size) %>% print()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
quit
library(swirl)
swirl()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
package_version("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran,-time)
select(cran, -(X:size))
-5:20
-(5:20)
select(cran,-time)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package =="swirl")
filter(cran, r_version == "3.1.1",country == "US")
quit
0
swirl(quit)
library(swirl)
swirl()
?Comparison
filter(cran, r_version <= "3.0.2",country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size> 100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran,ip_id, package, size)
View(cran3)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(by_package, mean(size))
summarize(cran, avg_bytes = mean(size))
library(swirl)
install_from_swirl("Statistical Inference")
sswirl())
swirl()
(10+11)/36
1-(2+1)/36
deck
52
4/52
0
12/52
2/51
View(hand)
save.image("C:/Users/David M Rochman/OneDrive/Coursera/DeckoCards.RData")
x <- c(-0.5, 0, 1, 1, 1.5)
y <- c(0,0,2,0,0)
plot(x,y, lwd = 3, frame=FALSE, type="1")
library(ggplot2)
plot(x,y, lwd = 3, frame=FALSE, type="1")
plot(x,y, lwd = 3, frame=FALSE, type="l")
plot(x,y, lwd = 3, frame=FALSE, type="l")
library(swirl)
swirl()
.064
.64
64%
.64
View(mypdf)
mypdf
function(x){x/2}
function(1.6){1.6/2}
View(mypdf)
View(mypdf)
integrate(mypdf,0,1.6)
1.41
info()
2
sqrt2
sqrt(2)
?Uniform
qunif(.75,0,1)
install.packages(c("car", "caret", "chron", "crayon", "curl", "foreign", "httr", "kernlab", "lme4", "quantmod", "R6", "Rcpp", "RcppEigen", "RCurl", "rJava", "RMySQL", "stringi", "survival", "TTR", "vcd", "XML"))
install.packages(pwr)
install.packages("pwr")
install.packages("googlesheets")
install.packages("curl")
library("swirl")
swirl()
students2
gather(res, sex_class,count)
res <- gather(students2, sex_class,count)
res <- gather(students2, sex_class,count, -grade)
res
?separate
serparate(res, sex_class, c("sex,class"))
separate(res, sex_class, c("sex,class"))
separate(res, sex_class, c("sex","class"))
print
students2 %>%
gather( students2, sex_class,count, -grade) %>%
separate( res, sex_class, c("sex","class")) %>%
print
students2 %>%
gather(students2, sex_class,count, -grade) %>%
separate(students2, sex_class, c("sex","class")) %>%
print
students2 %>% gather(students2, sex_class,count, -grade) %>%
separate(students2, sex_class, c("sex","class")) %>%
print
students2 %>% gather(students2, sex_class, -grade) %>%
separate(students2, sex_class, c("sex","class")) %>%
print
reset()
install.packages("mi")
install.packages("ctv")
library("ctv")
install.views("Regression")
sd(apply(matrix(rnorm(nosim*n), nosim), 1, mean))
nosim <- 1000
n <-10
sd(apply(matrix(rnorm(nosim*n), nosim), 1, mean))
library("swirl")
swirl()
students2 %>%
gather(students, sex, count, -grade) %>%
separate(res, sex_class, c("sex","class")) %>%
print
View(students2)
print
students2 %>%
gather(students, sex, count, -grade) %>%
separate(res, sex_class, c("sex","class")) %>%
students2 %>%
gather(students, sex, count, -grade) %>%
separate(sex_class, c("sex","class")) %>%
print
students2 %>%
gather(students, sex, count, -grade) %>%
separate(sex_class, c("sex","class")) %>%
print
skip
submit
submit()
reset()
View(students2)
View(students3)
View(students)
?gather
students2 %>%
gather(students2, sex_class,count, -grade) %>%
separate(sex_class, c("sex","class")) %>%
print
install.packages(c("evaluate", "knitr"))
library("swirl")
swirl()
n <- 1000
means <- cumsum(rnorm(n))/(1:n)
means <- cumsum(sample(0:1, n, replace = TRUE))/(1:n)
round(pnorm(70, mean=80, sd=10,lower.tail = TRUE)*100)
round(pnorm(95, mean = 1100, sd = 75))
round(pnorm(.95, mean = 1100, sd = 75))
round(pnorm(.95, mean = 1100, sd = 75, lower.tail = FALSE))
round(pnorm(.95, mean = 1100, sd = 75, lower.tail = FALSE),3)
round(qnorm(.95, mean = 1100, sd = 75, lower.tail = FALSE),3)
round(qnorm(.95, mean = 1100, sd = 75/sqrt(100), lower.tail = FALSE),3)
round(pbinom(4, prob = .5, size = 5, lower.tail = FALSE))
round(pnorm(14, mean = 15, sd=10/sqrt(100) ))
round(qnorm(.5, sd= sqrt(1/12/1000)))
round(pnorm(.5, sd= sqrt(1/12/1000), lower.tail = FALSE))
round(pnorm(,mean = .5 sd= sqrt(1/12/1000), lower.tail = FALSE))
round(pnorm(mean = .5, sd= sqrt(1/12/1000), lower.tail = FALSE))
round(pnorm(,mean = .5, sd= sqrt(1/12/1000), lower.tail = FALSE))
round(ppois(10, lambda = (5*3)*100,1)
round(ppois(10, lambda = (5*3)*100,1))
round(ppois(10, lambda = 5*3)*100,1)
round(qnorm(.95, mean = 1100, sd = 75, lower.tail = TRUE),3)
round(qnorm(.95, mean = 1100, sd = 75/sqrt(100), lower.tail = TRUE),3)
library(swirl)
swirl()
library("dplyr")
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
countries = n_distinct(country),avg_bytes = mean(size))
pack_sum <- summarize(by_package,count = n(), unique = n_distinct(ip_id),
countries = n_distinct(country),avg_bytes = mean(size))
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
filter(pack_sum, count>679)
top_counts <- filter(pack_sum, count>679)
View(top_counts)
top_counts
View(top_counts)
?replicate
?rexp
xcol <- replicate(1000, rexp(40, rate = .20))
View(xcol)
dim(xcol)
library(dplyr)
erun <- tbl_df(xcol)
?colMeans
colMeans(xcol, 40, 1000, na.rm = FALSE)
colMeans(xcol, na.rm = FALSE)
X <- .colMeans(xcol, 40, 1000, na.rm = FALSE)
hist(X)
var(X)
var(xcol)
mean(X)
sd(X)
var(X)
5/sqrt(40)
(5/sqrt(40))^2
y <- c(1:1000)
dexp(y, .20)
ycol <- dexp(y, .20)
hist(ycol)
?dexp
ycol <- replicate(1000,dexp(1, .20)
ycol <- replicate(1000,dexp(1, .20))
hist(ycol)
ycol <- replicate(1000,dexp(1, .20))
ycol <- replicate(1000,rexp(1, .20))
hist(ycol)
mean(ycol)
var(ycol)
sd(ycol)
sd(X)
?se
ycol <- replicate(1000,dexp(1, .20))
ycol <- replicate(1000,rexp(1, .20))
?colVar
var(xcol)
View(xcol)
?var
colVars(xcol, 40, 1000)
?.colVars
install.packages("matrixStats")
library(matrixStats)
?colVars
colVars(xcol)
Y <- colVars(xcol)
mean(Y)
library(installr)
updateR()
install.packages(c("foreign", "pwr"))
data("sleep")
data("sleep")
head(sleep)
g1 <- sleep$extra[1:10];g2 <- sleep$extra[11:20]
difference <- g2-g1
mn <- mean(difference); s <- sd(difference); n <- 10
t.test(difference)
t.test(g2,g1, paired = TRUE)
t.test(extra ~ I(relevel(group,2)), paired = TRUE, data = sleep)
library(datasets); data("ChickWeight"); library(reshape2)
View(ChickWeight)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
View(wideCW)
names(wideCW)[-(1:2)] <- paste("time", names(wideCW)[-(1:2)], sep = "")
View(wideCW)
library(dplyr)
wideCW <- mutate(wideCW,
gain = time21 - time0
)
View(wideCW)
wideCW14 <- subset(wideCW, Diet %in% c(1,4))
rbind(
t.test(gain ~ Diet, paired = FALSE, var.equal =TRUE, data = wideCW14)$conf,
t.test(gain ~ Diet, paired = FALSE, var.equal = FALSE, data = wideCW14)$conf
)
?t.test
?pt
?t.test
1100 + c(-2,2)*qt(0.95)*30/sqrt(8)
1100 + c(-2,2)*qt(0.95,8)*30/sqrt(8)
1100 + c(-2,2)*qt(0.95,8)*30/sqrt(9)
1100 + c(-1,1)*qt(0.95,8)*30/sqrt(9)
1100 + c(-1,1)*qt(0.95,8)*30/sqrt(8)
?qt
1100 + c(-1,1)*qt(0.95,8)*30/sqrt(9)
qt(.95, 8)
1100 + c(-1,1)*qt(0.975,8)*30/sqrt(9)
?t.test
(3-5) + c(-1,1)*qt(0.975,19)*sqrt(68)/sqrt(20)
(3-5) + c(-1,1)*qt(0.975,18)*(sqrt(60)/sqrt(20)+sqrt(68)/sqrt(20))
(3-5) + c(-1,1)*qt(0.975,18)*(60/20+68/20)^1/2
(3-5) + c(-1,1)*qt(0.975,18)*(60/20)+(68/20)^1/2
(3-5) + c(-1,1)*qt(0.975,18)*((60/20)+(68/20))^1/2
sp <- sqrt((19*.60+19*.68)/38)
(3-5) + c(-1,1)*qt(0.975,38)*sp*(1/10+1/10)^.5
(3-5) + c(-1,1)*qt(0.975,18)*((.60/20)+(.68/20))^1/2
sq <- sqrt((99*.5^2+99*2^2)/198)
(4-6) + c(-1,1)*qz(0.975,198)*sq*(1/100+1/100)^.5
(4-6) + c(-1,1)*qnorm(0.975,198)*sq*(1/100+1/100)^.5
(6-4) + c(-1,1)*qnorm(0.975,198)*sq*(1/100+1/100)^.5
m <- (-3-1); sd <- (1.5-1.8); n <- 18
m + c(-1,1)*qt(0.95,n-1)*sd/sqrt(n)
sr <- sqrt((8*1.5^2+8*1.8^2)/16)
m + c(-1,1)*qt(.95, 16)*sr*(1/18+1/18)^.5
sr <- ((8*1.5^2+8*1.8^2)/16)
m + c(-1,1)*qt(.95, 16)*sr*(1/18+1/18)^.5
sp <- ((19*.sqrt(.60)+19*sqrt(.68)/38)
sp <- (19*.sqrt(.60)+19*sqrt(.68)/38)
sp <- (19*.sqrt(.60)+19*sqrt(.68)/38)
sp <- (19*sqrt(.60)+19*sqrt(.68)/38)
(3-5) + c(-1,1)*qt(0.975,38)*sp*(1/10+1/10)^.5
sp <- sqrt((19*.60+19*.68)/38)
sp <- sqrt((9*.60+9*.68)/18)
(3-5) + c(-1,1)*qt(0.975,18)*sp*(1/10+1/10)^.5
sq <- ((99*.5^2+99*2^2)/198)
(6-4) + c(-1,1)*qnorm(0.975,198)*sq*(1/100+1/100)^.5
sr <- ((8*1.5^2+8*1.8^2)/16)
m + c(-1,1)*qt(.95, 16)*sr*(1/9+1/9)^.5
m + c(-1,1)*qt(.95, 16)*sr*(1/18+1/8)^.5
m + c(-1,1)*qt(.95, 16)*sr*(1/18+1/18)^.5
1100 + c(-1,1)*qt(0.975,8)*30/sqrt(9)
sp <- sqrt((9*.60+9*.68)/18)
(3-5) + c(-1,1)*qt(0.975,18)*sp*(1/10+1/10)^.5
?qnorm
(6-4) + c(-1,1)*qnorm(0.975,)*sq*(1/100+1/100)^.5
1100 + c(-1,1)*qt(0.975,8)*30/sqrt(9)
setwd("~/GitHub/Course-Projects/SI Projects")
ycol <- replicate(1000,rexp(1, .20))
hist(ycol)
mean(ycol)
var(ycol)
sd(ycol)
?knitr
