}
columnmeans(airquality)
columnmean(airquality)
columnmean <- function(x) {
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(x[, i], na.rm = removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality)
function (x, ...)
columnmean <- function(x) (x, removeNA = true)
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(x[, i], na.rm = removeNA)
}
means
}
columnmean <- function(x) (x, removeNA = true){
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(x[, i], na.rm = removeNA)
}
means
}
olumnmean <- function(x) (x, removeNA = true){
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(x[, i], na.rm = removeNA)
}
means
columnmean <- function(x, removeNA = TRUE){
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(x [, i], na.rm = removeNA)
}
means
}
columnmean(airquality)
mydata <- rnorm(100)
sd(mydata)
sd(x = mydata)
sd(x = mydata, na.rm = FALSE)
args(lm)
make.power <- function(n) {
pow<- function(x) {
x^n
}
pow
}
make.power(3)
cube <- make.power(3)
cube(3)
pollutantmean <- function(directory,pollutant, id + 1:332)
pollutantmean <- function(directory,pollutant, id = 1:332)
install.packages("swirl")
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
swirl()
install.packages("GAR")
swirl()
library(swirl)
switl()
swirl()
5 + 7
x <- 5 + 7
x
hw1_data <- read.csv("~/Dropbox/Coursera/Datasets/hw1_data.csv")
View(hw1_data)
head(Ozone)
HW<-hw1_data.csv
dwp
head.(Ozone,2)
head(hw1_data)
mean(Ozone)
mean()
mean?
?mean
?mean
install.packages(data.frame)
data.frame()
data.frame(hw1_data)
mean("Ozone")
hw1_data <- read.csv("~/Dropbox/Coursera/Datasets/hw1_data.csv")
View(hw1_data)
bad <- is.na(hw1_data)
hw1_data(!bad)
hw1_data[!bad]
hw1_data <- read.csv("~/Dropbox/Coursera/Datasets/hw1_data.csv")
View(hw1_data)
good <- complete.cases(hw1_data)
hw1_data[good]
good
hw1_data[good]
fuzz<- complete.cases(hw1_data)
hw1_data[fuzz,]
x<-4
Class(x)
class(x)
y<-c(4,true)
y<c(4,TRUE)
y<- c(4,TRUE)
class(y)
a <- c(1,3,5)
b <- c(3,2,10)
rbind(a,b)
install.packages(c("boot", "class", "cluster", "codetools", "colorspace", "foreign", "ggplot2", "jsonlite", "lattice", "manipulate", "MASS", "Matrix", "mgcv", "mime", "nlme", "nnet", "NSM3", "rpart", "rstudioapi", "spatial", "survival"))
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
download.file()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
?download.file
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv )
read(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml)
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileurl, destfile = "./data/cameras.csv", method = "curl")
dwd
wd()
setwd("~/")
getwd()
hw1_data <- read.csv("~/Dropbox/Coursera/Datasets/hw1_data.csv")
View(hw1_data)
head(hw1_data)
install.packages("data.table")
install.packages("ggplot2")
library("data.table")
library("data.table")
DF = data.frame(x=rnorm(9, y=rep(c("a", "b", "c"), each=3), z=rnorm(9))
>
<
DF = data.frame(x=rnorm(9), y=rep(c("a", "b", "c"), each=3), z=rnorm(9))
head(DF,3)
tables(DF)
DT = data.table(x=rnorm(9), y=rep(c("a", "b", "c"), each=3), z=rnorm(9))
tables(DT)
head(DT,3)
tables(DT)
tables()
DT[2,]
DT[,list(mean(x), sum(y))]
DT[,list(mean(x), sum(z))]
DT[,w:=z^2]
View(DT)
DT[,m:={tmp<-(x+z); log2(tmp+5)}]
View(DT)
install.packages(dplyr)
install.packages("DPYLR")
install.packages("DPLYR")
Y
install.packages("dplyr")
install.packages("ggplot2")
install.packages("rtools")
install.packages("RMySQL")
install.packages("XLConnect")
install.packages("foreign")
install.packages("tidlyr")
install.packages("stringr")
install.packages("lubridate")
install.packages("car")
install.packages("vcd")
install.packages("gimnet")
install.packages("survival")
install.packages("caret")
install.packages("R Markdown")
install.packages("xtable")
install.packages("data.table")
install.packages("manipulate")
install.packages("markdown")
install.packages("gtable")
install.packages("bootstrap")
install.packages("swirl")
install.packages("jackknife")
library("swirl")
install_from_swirl("Getting_and_Cleaning_Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library("dplyr")
library(dplyr)
packageName(dplyr)
packageName("dplyr")
packageName("dplyr")
help()
head(mydf)
(arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
head(mydf)
packageName(dplyr)
packageName("dplyr")
detach("package:dplyr", unload=TRUE)
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
packageVersion("dplyr", lib.loc=NULL)
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran,-time)
install.packages("readr")
install.packages("readxl")
install.packages("haven")
install.packages("DBI")
x <- 1:15
y <- 16:30
rbind(x,y)
cbind(x,y)
matrix(nrow= x, ncol=y)
install.packages("RMySQL")
library(swirl)
swirl()
quit
swirl(quit)
install.packages("installr")
install.packages(c("dplyr", "MASS", "Matrix", "plyr", "scales", "survival", "vcd"))
detach("package:graphics", unload=TRUE)
detach("package:grDevices", unload=TRUE)
detach("package:datasets", unload=TRUE)
detach("package:methods", unload=TRUE)
detach("package:stats", unload=TRUE)
detach("package:utils", unload=TRUE)
# installing/loading the latest installr package:
install.packages("installr"); library(installr) #load / install+load installr
install.packages("installr");
install.packages("dplyr")
install.packages("ggplot2")
install.packages("rtools")
install.packages("RMySQL")
install.packages("XLConnect")
install.packages("foreign")
install.packages("tidlyr")
install.packages("stringr")
install.packages("lubridate")
install.packages("car")
install.packages("vcd")
install.packages("gimnet")
install.packages("survival")
install.packages("caret")
install.packages("R Markdown")
install.packages("xtable")
install.packages("data.table")
install.packages("manipulate")
install.packages("markdown")
install.packages("R Markdown")
install.packages("gtable")
install.packages("bootstrap")
install.packages("swirl")
install.packages("jackknife")
install.packages("readr")
install.packages("readxl")
install.packages("haven")
install.packages("installr")
install.packages("knitr")
install.packages("pwr")
install.packages("googlesheets")
install.packages("mi")
install.packages("ctv")
install.packages("matrixStats")
install.packages("UsingR")
install.packages("VIF")
install.packages("purrr")
install.packages("rmarkdown")
install.packages(c("chron", "class", "crayon", "curl", "httr", "jsonlite", "lme4", "MASS", "mime", "nlme", "nnet", "quantreg", "R6", "Rcpp", "RcppEigen", "RCurl", "rJava", "scales", "SparseM", "spatial", "stringi"))
library(UsingR)
data(diamond)
library(ggplot2)
g = ggplot(diamond, aes(x = carat, y = price),)
g = g + xlab("Mass(carats)")
g = g + ylab("Price (in $)")
g = g + geom_point(size = 6, colour = "black", alpha= 0.2 )
g = g + geom_point( size = 5, colour = "blue", alpha= 0.2)
g = g + geom_smooth(method = "lm", colour = "black")
g
fit <- lm(price ~ carat, data = diamond)
coef(fit)
fit2 <- lm(price ~ I(carat - mean(carat)), data = diamond)
coef(fit2)
fit2 <- lm(price ~ I(carat - mean(carat), data = diamond)
fit2 <- lm(price ~ I(carat - mean(carat)), data = diamond)
fit2 <- lm(price ~ I(carat - mean(carat)), data = diamond)
coef(fit2)
fit3<- lm(price ~ I(carat*10), data = diamond)
coef(fit3)
newx <- c(0.16, 0.27, 0.34)
coef(fit)[1] + coef(fit)[2]* newx
predict(fit, newdata = data.frame(carat = newx))
library(swirl)
swirl()
lm(Fertility ~ ., data = swiss)
all <- lm(Fertility ~ ., data = swiss)
summary(all)
lm(Fertility ~ agriculture)
lm(Fertility ~ agriculture, data = swiss)
lm(Fertility ~ Agriculture, data = swiss)
summary(lm(Fertility ~ Agriculture, data = swiss))
cor(Examination, Education, data = swiss)
cor(Examination, Education)
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
?makelms
makelms()
ec <- sum(swiss$Examination, swiss$Catholic)
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~ . + ec, data = swiss)
coef(efit - all)
coef(efit) - coef(all)
all$coefficients - efit$coefficients
library(swirl)
swirl()
detach("package:swirl", unload=TRUE)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library
library(dplyr)
package_version("dplyr")
packageVersion(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package =="swirl")
filter(cran, r_version == "3.1.1",country == "US")
?Comparison
filter(cran, r_version <= "3.0.2",country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size> 100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, country, desc(r_version), ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
select(cran, ip_id, package, size)
cran3 <- select(cran,ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(x*w)/sum(w)
x <- c(0.8, 0.47,0.51,0.73,0.36,0.58,0.57,0.85,0.44,0.42)
y <- c(1.39,0.72,1.55,0.48,1.19,-1.59,1.23,-0.65,1.49,0.05)
regr_line <- lm(y~x + 0)
coef(regr_line)
data(mtcars)
head(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
regr_line <- lm(y~x)
coef(regr_line)
slope <- .5*1/.5
slope
n_quiz1 <- 1.5
n_quiz2 <- 0.4 * n_quiz1
n_quiz2
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
m <- mean(x)
s <- sd(x)
ans <- (8.58- m)/s
ans
x <- c(0.8, 0.47,0.51,0.73,0.36,0.58,0.57,0.85,0.44,0.42)
y <- c(1.39,0.72,1.55,0.48,1.19,-1.59,1.23,-0.65,1.49,0.05)
regr_line <- lm(y~x)
coef(regr_line)
mean(x)
?require
library(datasets); data(swiss)
require(dplyr)
swiss = mutate(swiss, CatholicBin = 1 * (Catholic > 50))
fit <- lm(Fertility ~ Agriculture + factor(CatholicBin), data = swiss)
library(swirl)
swirl()
lm(child ~ parent, data = galton)
fit <- lm(formula = child ~ parent, data = galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coefficients[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(rhs, lhs)
varChild <- var(children, galton)
varChild <- var(child, galton)
varChild <- var(fit)
?var
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- est(ols.slope, ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varRes, varEst)
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
efit$residuals
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
library(dplyr)
library(data.table)
col_names <- colnames(uci_final)
library(plyr)
library(reshape2)
library(gtools)
### !!!! You need to download
### https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
### to your HD and run this script from the directory UCI HAR Dataset was saved
setwd("~/GitHub/Course-Projects/Getting_Cleaning_Data/UCI HAR Dataset")
### Read data into table objects
features <- read.table('./features.txt',header = FALSE)
activity <- read.table('./activity_labels.txt',header = FALSE)
subject_train <- read.table('./train/subject_train.txt', header = FALSE)
xTrain <- read.table('./train/x_train.txt', header = FALSE)
yTrain <- read.table('./train/y_train.txt', header = FALSE)
### Assign column names to the tables
colnames(activity) = c('activityID', 'activityType')
colnames(subject_train) = "subjectID"
colnames(xTrain) = features[,2]
colnames(yTrain) = "activityID"
### Merge the individual training table objects into training object
training_data <- cbind(yTrain, subject_train, xTrain)
### Read in Test data to table objects
subject_test <- read.table('./test/subject_test.txt', header = FALSE)
xTest<- read.table('./test/x_test.txt',header=FALSE)
yTest <- read.table('./test/y_test.txt', header = FALSE)
### Assign Column Names
colnames(subject_test) ="subjectID"
colnames(xTest) = features[,2]
colnames(yTest) = "activityID"
### Merge test data table objects
test_data <- cbind(yTest, subject_test, xTest)
### Merge training and test data table objects
uci_merge <- rbind(training_data, test_data)
### Create a vector of column names
col_names <- colnames(uci_merge)
### Assign a logical vector to a variable using the grepl function
logical_vector = (grepl("activity..",col_names) | grepl("subject..",col_names) | grepl("-mean..",col_names)
& !grepl("-meanFreq..",col_names) & !grepl("mean..-",col_names) | grepl("-std..",col_names)
& !grepl("-std()..-",col_names))
### Create a final data frame using desired values
uci_final = uci_merge[logical_vector == TRUE]
### Merge the descriptives to name activities
uci_final <- merge(uci_final,activity, by= 'activityID', all.x=TRUE)
col_names <- colnames(uci_final)
### Assign more descriptive variable names
for (i in 1:length(col_names))
{
col_names[i] = gsub("\\()","",col_names[i])
col_names[i] = gsub("-std$", "StdDev", col_names[i])
col_names[i] = gsub("-mean", "Mean", col_names[i])
col_names[i] = gsub("^(t)", "Time", col_names[i])
col_names[i] = gsub("^(f)", "Freq", col_names[i])
col_names[i] = gsub("([Gg]ravity)","Gravity", col_names[i])
col_names[i] = gsub("([Bb]ody[Bb]ody|[Bb]ody)", "Body", col_names[i])
col_names[i] = gsub("[Gg]yro", "Gyro", col_names[i])
col_names[i] = gsub("AccMag", "AccMagnitude", col_names[i])
col_names[i] = gsub("([Bb]odyaccjerkmag)", "BodyAccJerkMagnitude", col_names[i])
col_names[i] = gsub("JerkMag", "JerkMagnitude", col_names[i])
col_names[i] = gsub("GyroMag", "GyroMagnitude", col_names[i])
}
### Assigning descriptive column names
colnames(uci_final) <- col_names
### Create a table with the average of each variable, activity & subject
uci_final_noact <- uci_final[,names(uci_final) !='activityType']
tidy_data <- aggregate(uci_final_noact[,names(uci_final_noact) != c('activityID','subjectID')]
,by=list(activityID=uci_final_noact$activityID,
subjectID = uci_final_noact$subjectID),mean)
tidy_data <- merge(tidy_data,activity,by='activityID',all.x=TRUE)
# Prepare the final tidy data frame for distribution
write.table(tidy_data,'./tidy_data.txt', row.names=TRUE,sep='\t')
View(uci_final)
View(uci_final_noact)
tidy_data_avg <- ddply(melt(tidy,"id.vars=c("Subject","Activity")),".(Subject,"Activity),"summarise,"MeanSamples=mean(value))
tidy_data_avg <- ddply(melt(tidy, id.vars=c("Subject","Activity")), .(Subject,Activity),summarize, MeanSamples=mean(value))
tidy_data_avg <- ddply(melt(tidy_data, id.vars=c("Subject","Activity")), .(Subject,Activity),summarize, MeanSamples=mean(value))
tidy_data_avg <- ddply(melt(tidy_data, id.vars=c("subjectID","activityID")), .(Subject,Activity),summarize, MeanSamples=mean(value))
tidy_data_avg <- ddply(melt(tidy_data, id.vars=c("subjectID","activityID")), .(subjectID,activityID),summarize, MeanSamples=mean(value))
View(tidy_data_avg)
View(tidy_data)
tidy_data <- tidy_data[order(tidy_data$subjectID,tidy_data$activityID),]
View(tidy_data)
